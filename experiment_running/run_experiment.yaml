apiVersion: v1
kind: ConfigMap
metadata:
  name: dummy-mixtures-and-budgets-cm
data:
  gcloud_dst: ""
---
apiVersion: batch/v1
kind: Job
metadata:
  name: <JOB_NAME>
  annotations:
    actual-mixtures-and-budgets: "<ACTUAL_MIXTURES_AND_BUDGETS_CM>"
    cm-to-publish: "<CM_TO_PUBLISH>"
    cols-to-censor: "<COLUMNS_TO_CENSOR>"
    custom-mixture: "<CUSTOM_MIXTURE>"
  labels:
    app: experiment-running
    dataset: "<DATASET_ID_LOWER>"
    exp-type: "<EXPERIMENT_TYPE>"
    exp-grouping: "<EXP_GROUPING>"
    unique-id: "<UNIQUE_ID>"
    opt-budget: "<OPT_BUDGET>"
    opt-budget-mult: "<OPT_BUDGET_MULTIPLIER>"
    opt-budget-height-cap: "<OPT_BUDGET_HEIGHT_CAP>"
    budget-min: "<BUDGET_MIN>"
    budget-max: "<BUDGET_MAX>"
    budget-step: "<BUDGET_STEP>"
    inner-layer-mult: "<INNER_LAYER_MULT>"
    num-repeats: "<NUM_REPEATS>"
    batch-size: "<BATCH_SIZE>"
    nu: "<NU>"
    rho: "<RHO>"
    eta: "<ETA>"
    eta-decay-step: "<ETA_DECAY_STEP>"
    eta-decay-mult: "<ETA_DECAY_MULT>"
    return-best-deepest: "<RETURN_BEST_DEEPEST_NODE>"
    mixture-selection-strategy: "<MIXTURE_SELECTION_STRATEGY>"
    record-test-error: "<RECORD_TEST_ERROR>"
    size: "<SIZE>"
    group-with: "<GROUP_WITH>"
    evaluate-best-result-again: "<EVALUATE_BEST_RESULT_AGAIN>"
    evaluate-best-result-again-eta-mult: "<EVALUATE_BEST_RESULT_AGAIN_ETA_MULT>"
spec:
  backoffLimit: 2
  template:
    spec:
      serviceAccountName: configmap-creator
      imagePullSecrets:
        - name: docker-creds
      initContainers:
        - name: download-dataset
          image: google/cloud-sdk:latest
          imagePullPolicy: Always
          volumeMounts:
            - mountPath: "/certs"
              name: gcloud-certs
              readOnly: true
            - mountPath: "/transfer"
              name: transfer
            - mountPath: "/mixtures_and_budgets_cm"
              name: actual-mixtures-and-budgets
          command:
            - sh
            - -c
            - |
              gcloud auth activate-service-account --key-file=/certs/svc_account.json

              gsutil cp "<GCLOUD_DATASET_BUCKET>/<DATASET_ID>/dataset_creation/created/<DATASET_FILENAME>" /transfer/dataset.p
              if [ -z "$(cat /mixtures_and_budgets_cm/gcloud_dst)" ]; then
                echo "Determined that there is no mixtures and budgets to use"
              else
                MIXTURES_AND_BUDGETS=$(cat /mixtures_and_budgets_cm/gcloud_dst)
                echo "Determined that mixtures and budgets file can be found: ${MIXTURES_AND_BUDGETS}"
                gsutil cp ${MIXTURES_AND_BUDGETS} /transfer/mixtures_and_budgets.p
              fi
        - name: process-dataset
          image: gcr.io/<GCLOUD_PROJECT>/main:<TAG>
          imagePullPolicy: Always
          resources:
            requests:
              cpu: "100m"
              memory: "<MEM_REQ>Gi"
            limits:
              cpu: "500m"
              memory: "<MEM_LIMIT>Gi"
          volumeMounts:
            - mountPath: "/transfer"
              name: transfer
            - mountPath: "/output"
              name: output
          command:
            - sh
            - -c
            - |
              python -u run_single_experiment.py \
                --dataset-path /transfer/dataset.p \
                --dataset-id <DATASET_ID> \
                --tag <TAG> \
                --actual-budgets-and-mixtures-path "$(ls -d /transfer/* | grep mixtures_and_budgets)" \
                --experiment-type <EXPERIMENT_TYPE> \
                --tree-search-objective "auc_roc_ovo" \
                --optimization-budget <OPT_BUDGET> \
                --optimization-budget-multiplier <OPT_BUDGET_MULTIPLIER> \
                --optimization-budget-height-cap <OPT_BUDGET_HEIGHT_CAP> \
                --budget-min <BUDGET_MIN> \
                --budget-max <BUDGET_MAX> \
                --budget-step <BUDGET_STEP> \
                --num-repeats <NUM_REPEATS> \
                --batch-size <BATCH_SIZE> \
                --model-mode "<MODEL_MODE>" \
                --sklearn-loss "<SKLEARN_LOSS>" \
                --sklearn-loss-penalty "<SKLEARN_LOSS_PENALTY>" \
                --sklearn-learning-rate "<SKLEARN_LEARNING_RATE>" \
                --sklearn-learning-rate-alpha "<SKLEARN_LEARNING_RATE_ALPHA>" \
                --sklearn-kernel "<SKLEARN_KERNEL>" \
                --sklearn-kernel-gamma "<SKLEARN_KERNEL_GAMMA>" \
                --sklearn-kernel-ncomponents "<SKLEARN_KERNEL_NCOMPONENTS>" \
                --nu <NU> \
                --rho <RHO> \
                --eta <ETA> \
                --eta-decay-step <ETA_DECAY_STEP> \
                --eta-decay-mult <ETA_DECAY_MULT> \
                --return-best-deepest-node "<RETURN_BEST_DEEPEST_NODE>" \
                --mixture-selection-strategy <MIXTURE_SELECTION_STRATEGY> \
                --custom-mixture "<CUSTOM_MIXTURE>" \
                --columns-to-censor "<COLUMNS_TO_CENSOR>" \
                --output-dir "/output" \
                --record-test-error "<RECORD_TEST_ERROR>" \
                --inner-layer-mult "<INNER_LAYER_MULT>" \
                --num-hidden-layers "3" \
                --inner-layer-size "128" \
                --evaluate-best-result-again "<EVALUATE_BEST_RESULT_AGAIN>" \
                --evaluate-best-result-again-eta-mult "<EVALUATE_BEST_RESULT_AGAIN_ETA_MULT>" \
                --use-alt-loss-fn "<USE_ALT_LOSS_FN>"
        - name: publish-dataset
          image: google/cloud-sdk:latest
          imagePullPolicy: Always
          volumeMounts:
            - mountPath: "/certs"
              name: gcloud-certs
              readOnly: true
            - mountPath: "/output"
              name: output
          command:
            - sh
            - -c
            - |
              gcloud auth activate-service-account --key-file=/certs/svc_account.json

              gsutil cp /output/* "<GCLOUD_DATASET_BUCKET>/<DATASET_ID>/experiment_running/<EXP_GROUPING>/<EXPERIMENT_TYPE>_<OPT_BUDGET>/"
      containers:
        - name: config-map-publisher
          image: lachlanevenson/k8s-kubectl:v1.14.2
          imagePullPolicy: Always
          volumeMounts:
            - mountPath: "/output"
              name: output
          command:
            - sh
            - -c
            - |
              if [ -z "<CM_TO_PUBLISH>" ]; then
                echo "No configmap to publish. Doing nothing"
              else
                cd /output
                kubectl create cm <CM_TO_PUBLISH> --from-literal gcloud_dst=<GCLOUD_DATASET_BUCKET>/<DATASET_ID>/experiment_running/<EXP_GROUPING>/<EXPERIMENT_TYPE>_<OPT_BUDGET>/$(ls *ACTUAL_MIXTURES_AND_BUDGETS.p)
              fi
      restartPolicy: Never
      volumes:
        - name: gcloud-certs
          secret:
            secretName: gcloud-creds
        - name: transfer
          emptyDir: {}
        - name: output
          emptyDir: {}
        - name: actual-mixtures-and-budgets
          configMap:
            name: <ACTUAL_MIXTURES_AND_BUDGETS_CM>
